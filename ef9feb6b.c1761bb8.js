(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),c=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||o;return n?a.a.createElement(m,l(l({ref:t},u),{},{components:n})):a.a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n(2),a=n(6),o=(n(0),n(103)),i={id:"developer-panel",title:"Developer Panel"},l={unversionedId:"tools/developer-panel",id:"tools/developer-panel",isDocsHomePage:!1,title:"Developer Panel",description:"When play-testing your game, it often happens that you want to set some variables to test something out.",source:"@site/docs/tools/developer-panel.md",slug:"/tools/developer-panel",permalink:"/igt-docs/docs/tools/developer-panel",version:"current",sidebar:"docs",previous:{title:"Item List",permalink:"/igt-docs/docs/features/item-list"},next:{title:"Requirements",permalink:"/igt-docs/docs/tools/requirements"}},s=[{value:"Requirements",id:"requirements",children:[]},{value:"Usage",id:"usage",children:[]},{value:"See also",id:"see-also",children:[]}],u={rightToc:s};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"When play-testing your game, it often happens that you want to set some variables to test something out.\nYou could load a specific save file, or do some hacking through the console, but this isn't always feasible."),Object(o.b)("p",null,"The Developer Panel is a solution! It allows each ",Object(o.b)("inlineCode",{parentName:"p"},"Feature")," to register a list of ",Object(o.b)("inlineCode",{parentName:"p"},"Field"),"s, that perform actions specific to your Feature.\nYou can add an input field that allows you to set any value to an attribute. Or a button that runs a custom function!"),Object(o.b)("h2",{id:"requirements"},"Requirements"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Support the most basic use-cases (number input)"),Object(o.b)("li",{parentName:"ul"},"Only exists in Development mode and will be disabled in production")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"Each ",Object(o.b)("inlineCode",{parentName:"p"},"Feature")," has a ",Object(o.b)("inlineCode",{parentName:"p"},"getDeveloperPanelFields()")," method that returns an empty list by default.\nOverride this method with a list of fields, and they will show up in the Panel under the Features tab!"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"export class IgtWallet extends Feature {\n    money: number = 0;\n    moneyMultiplier: number = 1;\n\n    getDeveloperPanelFields(): AbstractField[] {\n        return [\n            // Create an editable textfield for the attribute 'money'\n            new NumberField('money', 'Current Money'),\n            \n            // Create a button with a custom function\n            new FunctionField(() => {\n                this.money = 10\n            }, 'Set money to 10').setCssClass('btn-blue'),\n            \n            // Create a range slider for the attribute 'money'\n            new RangeField('money', 0, 100, 2, 'Money Slider'),\n            \n            // Create a dropdown menu\n            new ChoiceField('moneyMultiplier', [\n                ['0.5x', 0.5],\n                ['1x', 1],\n                ['2x', 2],\n            ], 'Multiplier'),\n        ];\n    }\n}\n")),Object(o.b)("h2",{id:"see-also"},"See also"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/developer-panel/fields/"}),"Available fields"))))}c.isMDXComponent=!0}}]);