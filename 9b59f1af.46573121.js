(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),c=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,b=p["".concat(s,".").concat(m)]||p[m]||g[m]||r;return n?i.a.createElement(b,l(l({ref:t},u),{},{components:n})):i.a.createElement(b,l({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<r;u++)s[u]=n[u];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return c}));var a=n(2),i=n(6),r=(n(0),n(103)),s={id:"settings",title:"Settings"},l={unversionedId:"features/settings",id:"features/settings",isDocsHomePage:!1,title:"Settings",description:"From changing the layout to toggling the automation of a feature, a Setting is anything the user can freely control.",source:"@site/docs/features/settings.md",slug:"/features/settings",permalink:"/igt-docs/docs/features/settings",version:"current",sidebar:"docs",previous:{title:"Wallet",permalink:"/igt-docs/docs/features/wallet"},next:{title:"Statistics",permalink:"/igt-docs/docs/features/statistics"}},o=[{value:"Requirements",id:"requirements",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"See also",id:"see-also",children:[]}],u={rightToc:o};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"From changing the layout to toggling the automation of a feature, a ",Object(r.b)("inlineCode",{parentName:"p"},"Setting")," is anything the user can freely control."),Object(r.b)("h2",{id:"requirements"},"Requirements"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Allow the player to easily change settings"),Object(r.b)("li",{parentName:"ul"},"Boolean, Number and String options"),Object(r.b)("li",{parentName:"ul"},"Extendable with different types"),Object(r.b)("li",{parentName:"ul"},"Multiple choice and Range settings"),Object(r.b)("li",{parentName:"ul"},"Set a default value"),Object(r.b)("li",{parentName:"ul"},"Lock settings and even options behind ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/igt-docs/docs/tools/requirements"}),"requirements")),Object(r.b)("li",{parentName:"ul"},"Save & Load")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'const settings = new Settings();\n\nsettings.add(\n    new MultipleChoiceSetting(SettingId.ExampleSetting, "Example setting", [\n        new SettingOption<number>("Option 1", 1),\n        new SettingOption<number>("Option 2", 2),\n        new SettingOption<number>("Option 3", 3),\n    ], 2));\n\nsettings.setSetting(SettingId.ExampleSetting, 4); // Not a valid option, nothing happens\nsettings.setSetting(SettingId.ExampleSetting, 1);\n\n// Passing <number> is optional.\nconst exampleSetting = settings.getSetting<number>(SettingId.ExampleSetting);\nif (exampleSetting?.value === 1) {\n    // Do something\n}\n')),Object(r.b)("h2",{id:"implementation"},"Implementation"),Object(r.b)("p",null,"The abstract ",Object(r.b)("inlineCode",{parentName:"p"},"Setting")," class is the base for all custom settings.\nIt uses ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/generics.html"}),"TypeScript Generics")," which allows the setting value to be any type you like."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/ig-template/features/settings/Setting.ts"',title:'"src/ig-template/features/settings/Setting.ts"'}),"export abstract class Setting<T> {\n    id: SettingId;\n    displayName: string;\n    options: SettingOption<T>[];\n    defaultValue: T;\n    value: T;\n\n    requirement: Requirement;\n\n    set(value: T): void {\n        if (!this.canAccess) {\n            return;\n        }\n        if (this.validValue(value)) {\n            this.value = value;\n        } else {\n            console.warn(`${value} is not a valid value for setting ${this.id}. It could be that the option is not yet unlocked.`);\n        }\n    }\n\n    validValue(value: T): boolean {\n        const option = this.options.find((option) => option.value === value);\n        if (option == undefined || !option.canAccess) {\n            return false;\n        }\n        return true;\n    }\n\n    isSelected(value: T): boolean {\n        return this.value === value;\n    }\n\n    get canAccess(): boolean {\n        return this.requirement.isCompleted\n    }\n}\n")),Object(r.b)("p",null,"An example extension is the ",Object(r.b)("inlineCode",{parentName:"p"},"RangeSetting"),", which allows its value to be any float between an min and max."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/ig-template/features/settings/RangeSetting.ts"',title:'"src/ig-template/features/settings/RangeSetting.ts"'}),'export class RangeSetting extends Setting<number> {\n    min: number;\n    max: number;\n\n    constructor(id: SettingId, displayName: string, min: number, max: number, defaultValue: number, requirement?: Requirement) {\n        // Pass the default value as an option\n        super(id, displayName, [new SettingOption<number>("Default", defaultValue)], defaultValue, requirement);\n\n        if (min >= max || max <= min) {\n            throw new RangeError(`Invalid range settings (min: ${min}, max: ${max}) for setting ${this.id}`)\n        }\n        this.min = min;\n        this.max = max;\n\n        if (!this.validValue(this.defaultValue)) {\n            throw new RangeError(`${this.defaultValue} is not a valid value for setting ${this.id}.`);\n        }\n    }\n\n    validValue(value: number): boolean {\n        return value >= this.min && value <= this.max;\n    }\n}\n')),Object(r.b)("h2",{id:"see-also"},"See also"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/123ishaTest/igt-library/tree/master/src/ig-template/features/settings"}),"src/ig-template/features/settings")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/123ishaTest/igt-library/tree/master/src/ig-template/features/settings/Setting.ts"}),"src/ig-template/features/settings/Setting.ts")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/123ishaTest/igt-library/tree/master/src/ig-template/features/settings/BooleanSetting.ts"}),"src/ig-template/features/settings/BooleanSetting.ts"))))}c.isMDXComponent=!0}}]);